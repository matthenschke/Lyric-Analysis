{"version":3,"sources":["Containers/Home/Components/SongList.js","Containers/Home/index.js","Containers/Analysis/index.js","App.js","serviceWorker.js","index.js"],"names":["SongList","props","songs","console","log","map","song","result","id","full_title","header_image_thumbnail_url","url","key","className","alt","src","to","pathname","state","Home","handleChange","e","setState","query","target","value","handleSubmit","preventDefault","axios","get","then","res","hits","data","catch","this","onSubmit","type","placeholder","onChange","Component","Analysis","lyrics","analysis","dataRecieved","location","post","JSON","parse","sentiment","document","label","score","concepts","concept","index","text","relevance","emotion","Object","keys","style","whiteSpace","App","basename","process","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cec375ce.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n\nconst SongList = props => {\n    let {songs} = props;\n    console.log(songs);\n    \n    songs = songs.map(song => {\n        \n        const {id, full_title, header_image_thumbnail_url, url} = song.result;\n        console.log(id);\n        return (\n            <li key = {id} className = \"song container\">\n                <h1 className = \"song-title\">{full_title}</h1>\n                <img  className = \"song-img text-center\" alt = '' src = {header_image_thumbnail_url} />\n                <NavLink className= \"song-btn btn btn-primary btn-large\" to = {{\n                pathname : `analysis/${id}`,\n                state : {url : url} \n            }}>View Analyis of this Song</NavLink>\n            </li>\n        )\n    })\n    return (\n        <div id = \"song-list\" className = \"text-left\">\n            <ul>\n                {songs}\n            </ul>\n        </div>\n    );\n};\n\nexport default SongList;","import React, { Component } from \"react\";\nimport SongList from \"./Components/SongList\";\nimport axios from \"axios\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\",\n      songs: null\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ query: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { query } = this.state;\n    axios\n      .get(`songs/${query}`)\n      .then(res => {\n        const { hits } = res.data;\n        this.setState({ songs: hits });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  };\n  render() {\n    const { songs } = this.state;\n    return (\n      <div id=\"home\" className=\"text-center\">\n        <div id=\"header\" className=\"mt-5\">\n          <h1 className=\"mb-3\">Welcome to my Lyric Sentiment Application!</h1>\n          <h4 className=\"mb-5\">\n            To get started, type in an artist or a song in the search bar\n          </h4>\n        </div>\n        <form id = \"form\" onSubmit={this.handleSubmit}>\n          <input id = \"search-bar\"\n            type=\"text\" placeholder = \"Please enter a song or an artist\"\n            onChange={this.handleChange}\n            value={this.state.query}\n          ></input>\n          <input id = \"submit-button\" className = \"ml-4 btn btn-primary btn-large\" type=\"submit\" value=\"Find songs!\"></input>\n        </form>\n        {songs && <SongList songs={songs} />}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Analysis extends Component {\n  async componentDidMount() {\n    console.log(\"hi\");\n    const { url } = this.props.location.state;\n    const { data } = await axios.post(\"/\", { url });\n    console.log(data);\n    this.setState({\n      lyrics: data.lyrics,\n      analysis: JSON.parse(data.analysis),\n      dataRecieved: true\n    });\n    console.log(this.state.analysis);\n  }\n\n  // componentDidUpdate(){\n  //   if (this.state.dataRecieved || this.state.analysis){\n  //     this.setState({dataRecieved : false});\n  //   }\n  // }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      lyrics: \"\",\n      analysis: null,\n      dataRecieved: false\n    };\n  }\n  render() {\n    let { dataRecieved } = this.state;\n    if (dataRecieved) {\n      let { lyrics, analysis } = this.state;\n\n      let { label, score } = analysis.sentiment.document;\n\n      let { concepts } = analysis;\n      concepts = concepts.map((concept, index) => {\n        let { text, relevance } = concept;\n        return (\n          <li key={index}>\n            <span>{`${text} `}</span>\n            <span>{`Relevancy : ${relevance}`}</span>\n          </li>\n        );\n      });\n\n      let emotion = <h2>Emotional Analysis Not Available!</h2>;\n      if (analysis.emotion){\n        emotion = Object.keys(analysis.emotion.document.emotion).map((key, index) => {\n          return <li key={index}>{`${key}: ${analysis.emotion.document.emotion[key]}`}</li> \n        })\n      } \n\n      return (\n        <div id=\"analysis-page\">\n          <div id=\"lyrics\">\n            <h1>Song Lyrics</h1>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{lyrics}</p>\n          </div>\n          <div id=\"analysis\">\n            <h1>Analysis</h1>\n            <div className = \"text-left\">\n            <div id=\"sentiment\">\n              <h2>Sentiment</h2>\n              <p>{`Label: ${label}`}</p>\n              <p>{`Score: ${score}`}</p>\n            </div>\n            <div id=\"concepts\">\n              <h2>Concepts</h2>\n              <ul>{concepts}</ul>\n            </div>\n              <ul id = \"emotion\">{emotion}</ul>\n          </div>\n        </div>\n        </div>\n      );\n    } else {\n      return <div id=\"loading\">Loading...</div>;\n    }\n  }\n}\n\nexport default Analysis;\n","import React, {Component} from 'react';\nimport './App.css';\n\n// importing react router dom and its components\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n// importing react components\nimport Home from \"./Containers/Home\";\nimport Analysis from \"./Containers/Analysis\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      // songs : [],\n      // // selectedSong : 'hio',\n      // analysis : {},\n    }\n  }\n  render(){\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/analysis/:songID\" component = {Analysis} />\n        </Switch>\n      </BrowserRouter>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}